#include "pch.h"
#include "c1.h"
#include "3-1.h"

#include "iostream"
using namespace std;


# -解决问题的思想和步骤：
   1.  对于给定的字符串，左边的括号入栈，p指针+1；
   2.  待全部入栈完毕，p指针依然后移，栈顶位置元素出栈，保存在e
   3.  对于p指到后面括号和e比较，若不满足，则括号不匹配
   4.  假设指针指到了其他字符，不处理，指针后移
   5.  等待while循环结束，判断栈是否为空，栈为空，结束运行，括号匹配
   6.  栈不为空，表示栈还有剩余的左边括号，即右边括号不够，缺乏右括号


//栈的应用，判断左右括号是否匹配
void Cheak()
{
	SqStack s;
	SElemType  ch[80], *p, e;        //基本的数据类型

     //栈的初始化
	InitStack(s);
	printf("请输入需要匹配的字符串表达式： \n");
	gets_s(ch);         //gets得到字符串
	p = ch;               //p指针得到了指向字符串的首字符

	//因为字符串的末尾会有个0，当没有到串的末尾
	while (*p)
	{
		switch (*p)
		{
		case '(':
		case '[':
		case '{': Push(s, *p++);              //将左端匹配的括号入栈，并且指针后移；break，跳出了switch语句块
			break;
		case ')':
		case ']':
		case '}': if (!StackEmpty(s))           //栈不为空
		{
			Pop(s, e);              //将栈顶元素出栈，暂时存储到e
			//看*p 这个 遍历到的左括号，是否和栈顶的括号，匹配
			if (! ( (e == '(' && *p == ')' ) || (e == '[' && *p == ']') || (e == '{' && *p == '}') ) )
			{
				printf("出现了左右括号不匹配的情况！\n");
				exit(ERROR);
			}
		}	
		//栈为空的情况
		else {
			printf("缺乏左边的括号！\n");
			exit(ERROR);
		}

		default: p++;                    //匹配到其他的字符，指针后移
	    }
	}
	//如果此时的栈为空，表明栈的所有元素都已经出栈成功了，即实现了括号匹配
	if (StackEmpty(s))
	{
		printf("括号匹配！\n");
	}
	else
		printf("缺乏右边的括号");
}

int main()
{
	Cheak();
}

